# My version:

import copy
import random

class Hat:
    
    def __init__(self, **kwargs):
        self.contents = []
        for color, count in kwargs.items():
            self.contents.extend([color] * count)

    def draw(self, num_balls_drawn):
        
        hand = []
        if num_balls_drawn >= len(self.contents):
            return self.contents[:]
        
        for _ in range(num_balls_drawn):
            ball = random.choice(self.contents)
            self.contents.remove(ball)
            hand.append(ball)
        return hand

def experiment(hat, expected_balls, num_balls_drawn, num_experiments):
    N = num_experiments
    M = 0
    
    for _ in range(N):
        experiment_hat = copy.deepcopy(hat)
        drawn_balls = experiment_hat.draw(num_balls_drawn)
        drawn_dict = {}
        for ball in drawn_balls:
            if ball in drawn_dict:
                drawn_dict[ball] += 1
            else:
                drawn_dict[ball] = 1
        
        success = True
        for color, count in expected_balls.items():
            if drawn_dict.get(color, 0) < count:
                success = False
                break
        if success:
            M += 1
        
       
    return M/N



hat = Hat(black=6, red=4, green=3)
probability = experiment(hat=hat,
                  expected_balls={'red':2,'green':1},
                  num_balls_drawn=5,
                  num_experiments=2000)

print(probability)




# ChatGPT version:

import random
import copy

class Hat:
    def __init__(self, **kwargs):
        self.contents = []
        for color, count in kwargs.items():
            self.contents.extend([color] * count)

    def draw(self, num_balls_drawn):
        if num_balls_drawn >= len(self.contents):
            drawn_balls = self.contents[:]
            self.contents.clear()
            return drawn_balls
        
        drawn_balls = random.sample(self.contents, num_balls_drawn)
        for ball in drawn_balls:
            self.contents.remove(ball)
        
        return drawn_balls

def experiment(hat, expected_balls, num_balls_drawn, num_experiments):
    M = 0
    N = num_experiments
    
    for _ in range(num_experiments):
        hat_copy = copy.deepcopy(hat)
        total_expected_balls = sum(expected_balls.values())
        if len(hat_copy.contents) < total_expected_balls:
            continue

        drawn_balls = hat_copy.draw(num_balls_drawn)
        drawn_ball_counts = {}
        for ball in drawn_balls:
            if ball in drawn_ball_counts:
                drawn_ball_counts[ball] += 1
            else:
                drawn_ball_counts[ball] = 1

        success = True
        for color, count in expected_balls.items():
            if drawn_ball_counts.get(color, 0) < count:
                success = False
                break
        
        if success:
            M += 1
    
    return M / N

hat = Hat(black=6, red=4, green=3)
probability = experiment(hat=hat,
                         expected_balls={'red': 2, 'green': 1},
                         num_balls_drawn=5,
                         num_experiments=2000)

print(probability)
