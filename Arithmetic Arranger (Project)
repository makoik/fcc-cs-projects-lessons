def arithmetic_arranger(problems, show_answers=True):
    
    count = 0
    for problem in problems:
        count += 1
        if count == 6:
            return ValueError('Error: Too many problems.')

    numbers = '1234567890'
    for problem in problems:
        for p in problem:
            i = numbers.find(p)
            if i == '+' or '-':
                continue
            if i == -1:
                return ValueError('Error: Numbers must only contain digits.')

    o_n = '+ - 1234567890'
    for problem in problems:
        for p in problem:
            i = o_n.find(p)
            if i == -1:
                return ValueError("Error: Operator must be '+' or '-'.")

    for problem in problems[::1]:
        for p in problem.split():
            if len(p) > 4:
                return ValueError("Error: Numbers cannot be more than four digits") 

    everything = []
    for _ in problems:
        everything.append(_)

    problems = ''
    for _ in everything:
        parts = _.split()
        upper_number = parts[0]
        lower_number = parts[2]
        lenght = max(len(upper_number), len(lower_number))
        problems += upper_number.rjust(lenght + 2) + ' ' * 4
    problems += '\n'

    for _ in everything:
        parts = _.split()
        upper_number = parts[0]
        operator = parts[1]
        lower_number = parts[2]
        if len(lower_number) > len(upper_number):
            problems += operator + ' ' + lower_number + ' ' * 4
        if len(lower_number) < len(upper_number):
            problems += operator + ' ' + ' ' * (len(upper_number) - len(lower_number)) + lower_number + ' ' * 4
        elif len(lower_number) == len(upper_number):
            problems += operator + ' ' + lower_number + ' ' * 4
    problems += ' \n'

    for _ in everything:
        parts = _.split()
        upper_number = parts[0]
        lower_number = parts[2]
        lenght = max(len(upper_number), len(lower_number))
        problems += '-' * (lenght + 2) + ' ' * 4
    problems += '\n'

    if show_answers == True:
        for _ in everything:
            parts = _.split()
            upper_number = parts[0]
            operator = parts[1]
            lower_number = parts[2]
            lenght = max(len(upper_number), len(lower_number))
            if operator == '+':
                answer = int(upper_number) + int(lower_number)
            if operator == '-':
                answer = int(upper_number) - int(lower_number)
            if len(str(answer)) >= 5:
                problems += ' ' + str(answer) + ' ' * 4
            if len(str(answer)) == lenght:
                problems += ' ' * 2 + str(answer) + ' ' * 4 
            elif len(str(answer)) == 4:
                problems += ' ' + str(answer) + ' ' * 4


    return problems

print(f'\n{arithmetic_arranger(["3 + 855", "3801 - 2", "45 + 43", "123 + 49"])}')



Cleaned up version.


def arithmetic_arranger(problems, show_results=False):
    # Check for too many problems
    if len(problems) > 5:
        return 'Error: Too many problems.'

    # Initializing the lines
    first_line = ''
    second_line = ''
    dashes_line = ''
    result_line = ''

    for problem in problems:
        # Split the problem into its components
        parts = problem.split()
        if len(parts) != 3:
            return 'Error: Invalid problem format.'

        upper_number = parts[0]
        operator = parts[1]
        lower_number = parts[2]

        # Check for valid operator
        if operator not in ['+', '-']:
            return "Error: Operator must be '+' or '-'."

        # Check that operands are digits
        if not (upper_number.isdigit() and lower_number.isdigit()):
            return 'Error: Numbers must only contain digits.'

        # Check that operands are no more than four digits
        if len(upper_number) > 4 or len(lower_number) > 4:
            return 'Error: Numbers cannot be more than four digits.'

        # Calculate the length of the longest operand + 2 (for spacing and operator)
        max_length = max(len(upper_number), len(lower_number)) + 2

        # Create each line formatted correctly with four spaces in between
        first_line += upper_number.rjust(max_length) + '    '
        second_line += operator + ' ' + lower_number.rjust(max_length - 2) + '    '
        dashes_line += '-' * max_length + '    '

        # Calculate the answer if show_results is True
        if show_results:
            if operator == '+':
                answer = int(upper_number) + int(lower_number)
            else:
                answer = int(upper_number) - int(lower_number)
            result_line += str(answer).rjust(max_length) + '    '

    # Combine the lines into the final arranged output
    arranged_problems = (
        first_line.rstrip() + '\n' +
        second_line.rstrip() + '\n' +
        dashes_line.rstrip()
    )

    # Include the result line if show_results is True
    if show_results:
        arranged_problems += '\n' + result_line.rstrip()

    return arranged_problems

# Function call to test
print(arithmetic_arranger(["32 + 8", "1 - 3801", "9999 + 9999", "523 - 49"], True))
